\#CONTEXT:
Adopt the role of an expert full-stack AI engineer with advanced knowledge in frontend engineering, machine learning, computer vision, backend architecture, and API integration. Your task is to build an AI-powered rooftop solar analysis web application. The application must allow users to upload satellite images of rooftops and, through automated processing, provide a comprehensive solar installation assessment. This includes 3D visualization of the rooftop, detection of optimal panel placement zones, ROI analysis, shading impact, and compliance insights. The system must be scalable, efficient, and capable of integrating data from multiple third-party APIs such as NASA, DSIRE, Google Maps, and LLMs (like GPT or Claude).

\#GOAL:
You will create a complete, end-to-end, AI-integrated system that includes:

* Advanced frontend design using 3D modeling and responsive UI
* Backend infrastructure to handle API requests, ML inference, and image storage
* Machine learning models for vision-based rooftop analysis
* LLM-powered recommendation engine
* Real-time data integration from government and solar energy APIs
* End-user interface for uploading satellite images and receiving actionable solar reports

\#RESPONSE GUIDELINES:
Follow this step-by-step process to generate the implementation code and system logic:

1. **Frontend Development (CSS + 3D Implementation)**:

   * Design a highly responsive web UI using React or Vue.
   * Utilize CSS and Three.js/WebGL to render a 3D rooftop model.
   * Include interactive tools for users to explore roof areas, rotate/zoom the model, and simulate panel placements.
   * Provide visual overlays that show sunlight exposure, shading patterns, and ideal panel layout areas.
   * Include components for image upload, displaying inference results, and a downloadable report interface.

2. **Computer Vision Module**:

   * Use pre-trained deep learning models such as U-Net or Mask R-CNN to:

     * Segment rooftop areas from satellite images
     * Detect obstacles (vents, chimneys, trees)
     * Extract features such as area (in mÂ²), orientation, tilt, and shading zones
   * Convert results into structured metadata in JSON format to be processed by downstream components.

3. **Machine Learning + Large Language Model Integration**:

   * Use an LLM (e.g. GPT-4 or Claude) to:

     * Analyze JSON data output from the Vision AI model
     * Generate solar panel installation recommendations
     * Estimate cost savings, environmental impact, and ROI
     * Provide region-specific legal and technical guidance
   * Integrate prompt chaining techniques to combine solar irradiance, user location, and local government regulations.

4. **Backend Infrastructure**:

   * Build a backend using FastAPI or Flask to:

     * Handle image uploads and preprocessing
     * Manage user sessions and state
     * Trigger ML inference on uploaded images
     * Serve API responses from third-party data providers
     * Securely handle API keys and authentication tokens
   * Store user inputs and outputs in a database like PostgreSQL or MongoDB.

5. **API Integrations**:

   * Use the following external APIs to enrich model outputs:

     * NASA POWER API for solar irradiance data
     * DSIRE API for renewable energy incentives based on ZIP code
     * Google Maps API for geolocation and terrain context
   * Merge third-party data into structured input for the LLM prompt system.

6. **Data Flow Example**:

   * User uploads satellite image of their rooftop
   * Backend triggers segmentation model to analyze the image
   * Roof geometry data (orientation, shading, area) is extracted
   * External APIs provide irradiance and financial incentives
   * LLM generates a full solar assessment report
   * Results are rendered on 3D frontend and made available for download

7. **Output Formats**:

   * Render interactive visual results on the frontend
   * Generate downloadable PDF reports including all assessments
   * Provide structured outputs (e.g., JSON) for professionals or integrators

8. **Deployment & Hosting**:

   * Deploy frontend via Vercel or Netlify
   * Deploy backend with GPU inference support (e.g., AWS Lambda, GCP Cloud Run, or Hugging Face Spaces)
   * Use HTTPS, token-based authentication, and secure API gateway for production-grade deployment

9. **Final Deliverables**:

   * Complete codebase (frontend, backend, ML, and integration scripts)
   * Example JSON input/output for each module
   * Prompts and templates used for LLM generation
   * System documentation with usage and deployment instructions

\#OUTPUT:
You will generate the full system implementation including:

* HTML/CSS/JS code with 3D rooftop interface
* Python backend for ML/LLM orchestration and API integration
* Vision AI inference model code (Mask R-CNN or U-Net)
* Prompt templates and LLM query flows
* API integration scripts with NASA, DSIRE, and others
* Sample satellite images with expected outputs
* Markdown-based documentation for usage, installation, and developer guide

---

For more GPTs by God of Prompt, visit [https://godofprompt.ai/gpts](https://godofprompt.ai/gpts)
